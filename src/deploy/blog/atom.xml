<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        BASIC blog full text feed    </title>
        <link href="blog/atom.xml" rel="self" />
    
        <link href="/"/>
    
        
    <updated>2011-04-19T10:15:10Z</updated>

    <id>/blog/atom.xml/</id>

            <entry>
            <title type="html">PYPY sandbox for safe execution of arbitrary python code</title>
            <author><name>Lakshmi Vyasarajan</name></author>
            <link href="/blog/python-sandbox-with-pypy.html"/>
            <updated>2011-04-17T10:57:00Z</updated>
            <published>2011-04-17T10:57:00Z</published>
            <id>/blog/python-sandbox-with-pypy.html</id>
                        <category   scheme="/blog/tags"
                        term="pypy"
                        label="Pypy" />
                        <category   scheme="/blog/tags"
                        term="python"
                        label="Python" />
                        <category   scheme="/blog/tags"
                        term="sandbox"
                        label="Sandbox" />
            
            <content type="html">
                                &lt;p&gt;So I wanted to run some untrusted code. Javascript looked good because it could
run in the browser (a natural sandbox). But I needed it to run server side&amp;nbsp;too. &lt;/p&gt;
&lt;p&gt;Pypy popped up on a few sites but it was a bit unclear on the use case for it at
first. But this &lt;a href=&#34;http://pypy.org/features.html#sandboxing&#34;&gt;helped&lt;/a&gt;. Plus, I like
python :)
So here is who to install it on ubuntu. A lot of help came from &lt;a href=&#34;http://www.stephendiehl.com/?p=295&#34;&gt;this&amp;nbsp;dude&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;I was on his site and &lt;a href=&#34;http://pypy.org/download.html#translate&#34;&gt;here&lt;/a&gt; every day for a&amp;nbsp;week.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;&amp;#36; sudo apt-get install \                                                                                                                                            
gcc make python-dev libffi-dev pkg-config \
libz-dev libbz2-dev libncurses-dev libexpat1-dev \
libssl-dev libgc-dev python-sphinx python-greenlet
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Get the source and start the translation&amp;nbsp;process&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;What is &amp;#8220;translating&amp;#8221;?&lt;/strong&gt;
It&amp;#8217;s the process of compiling code written in
&lt;a href=&#34;http://code.google.com/p/rpython/&#34;&gt;RPython&lt;/a&gt; (a statically typed subset of
Python) to the target platform wich is by default&amp;nbsp;C.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;why do we need to do that?&lt;/strong&gt;
This goes back to &lt;a href=&#34;http://codespeak.net/pypy/dist/pypy/doc/getting-started.html#what-is-pypy&#34;&gt;what Pypy
is&lt;/a&gt;.
To quote: PyPy is an implementation of the Python programming language written
in Python itself. So combine python written in python and a compiler for python we
bet the ability to compile python code to native C speeds.&amp;nbsp;:)&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;&amp;#36; wget http://pypy.org/download/pypy-1.4.1-src.tar.bz2
&amp;#36; tar -jxvf  ./pypy-1.4.1-src.tar.bz2
&amp;#36; cd ./pypy-1.4.1-src/pypy/translator/goal
&amp;#36; python translate.py --sandbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Grab a bite to eat or a cup of&amp;nbsp;tea&lt;/p&gt;
&lt;p&gt;Now while you are still in&amp;nbsp;~/pypy-1.4.1-src/pypy/translator/goal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#36; sudo ln -s &amp;grave;pwd&amp;grave;../sandbox/pypy_interact.py /usr/local/bin/pypy_interact.py &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go&amp;nbsp;home!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#36; cd 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make a symlink of the source to&amp;nbsp;/opt&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#36; sudo ln -s &amp;grave;pwd&amp;grave;/pypy-1.4.1-src/ /opt/pypy-sandbox &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;#8217;s test&amp;nbsp;it&amp;#8230;&lt;/p&gt;
&lt;p&gt;Should see prompt and don&amp;#8217;t go further if you&amp;nbsp;don&amp;#8217;t&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#36; pypy_interact.py /opt/pypy-sandbox/pypy/translator/goal/pypy-c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;#8217;s test the sandbox! Make a dummy file and put it in the virutal tmp&amp;nbsp;folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#36; mkdir ~/virtualtmp
&amp;#36; echo Good day Sire! &amp;gt; ~/virtualtmp/greetings.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specify the ~/virtualtmp for /tmp in the&amp;nbsp;sandbox&lt;/p&gt;
&lt;p&gt;Note: the &amp;#8212;tmp option is always relative to the prompt regardless of absolute
paths put there. So &amp;#8220;/some/path/&amp;#8221; is not from root and &amp;#8220;~/a/path&amp;#8221; is not from
home. It&amp;#8217;s all relative to the&amp;nbsp;prompt.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#36; pypy_interact.py --tmp=virtualtmp /opt/pypy-sandbox/pypy/translator/goal/pypy-c &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: you&amp;#8217;ll see logging text as well, output will be in there somewhere&amp;nbsp;;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;/tmp/greetings.txt&#39;)
&amp;gt;&amp;gt;&amp;gt;&amp;gt; f.read()
&#39;Good day Sire!\\n&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s try opening it to write
But &lt;span class=&#34;caps&#34;&gt;NO&lt;/span&gt;! you&amp;nbsp;cannot!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;/tmp/greetings.txt&#39;, &#39;r+&#39;)
Traceback (most recent call last):
  File &#34;&lt;console&gt;&#34;, line 1, in &lt;module&gt;
IOError: [Errno 1] Operation not permitted: &#39;/tmp/greetings.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[crtl+c to exit]
They suggest installing ledit to have a saner&amp;nbsp;prompt&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;&amp;#36; sudo apt-get install ledit
&amp;#36; ledit python -u /usr/local/bin/pypy_interact.py --tmp=virtualtmp /opt/pypy-sandbox/pypy/translator/goal/pypy-cp
&lt;/code&gt;&lt;/pre&gt;            </content>
        </entry>
    </feed>